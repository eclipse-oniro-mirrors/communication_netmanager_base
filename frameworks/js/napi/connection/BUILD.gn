# Copyright (c) 2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if ("${product_name}" == "m40") {
  import("//build/ohos.gni")

  SUBSYSTEM_DIR = "//foundation/communication"
  NETMANAGER_BASE_NAPI_ROOT =
      "$SUBSYSTEM_DIR/netmanager_base/frameworks/js/napi/"

  utils_source = [
    "$SUBSYSTEM_DIR/netmanager_base/utils/base_context/src/netmanager_base_base_context.cpp",
    "$SUBSYSTEM_DIR/netmanager_base/utils/event_manager/src/netmanager_base_event_listener.cpp",
    "$SUBSYSTEM_DIR/netmanager_base/utils/event_manager/src/netmanager_base_event_manager.cpp",
    "$SUBSYSTEM_DIR/netmanager_base/utils/module_template/src/netmanager_base_module_template.cpp",
    "$SUBSYSTEM_DIR/netmanager_base/utils/napi_utils/src/netmanager_base_napi_utils.cpp",
  ]

  utils_include = [
    "$SUBSYSTEM_DIR/netmanager_base/utils/base_async_work/include",
    "$SUBSYSTEM_DIR/netmanager_base/utils/base_context/include",
    "$SUBSYSTEM_DIR/netmanager_base/utils/event_manager/include",
    "$SUBSYSTEM_DIR/netmanager_base/utils/log/include",
    "$SUBSYSTEM_DIR/netmanager_base/utils/module_template/include",
    "$SUBSYSTEM_DIR/netmanager_base/utils/napi_utils/include",
  ]

  common_include = [
    "//foundation/ace/napi/interfaces/kits",
    "//foundation/ace/napi",
    "//third_party/libuv/include",
    "//third_party/node/src",
  ]

  common_deps = [
    "//foundation/ace/napi/:ace_napi",
    "//foundation/communication/netmanager_base/interfaces/innerkits/netconnclient:net_conn_manager_if",
    "//third_party/libuv:uv_static",
    "//utils/native/base:utils",
  ]

  common_external_deps = [
    "hiviewdfx_hilog_native:libhilog",
    "ipc:ipc_core",
  ]

  common_relative_install_dir = "module/net"
  common_part_name = "netmanager_base"
  common_subsystem_name = "communication"

  ohos_shared_library("connection") {
    include_dirs = [
      "$NETMANAGER_BASE_NAPI_ROOT/connection/async_context/include",
      "$NETMANAGER_BASE_NAPI_ROOT/connection/async_work/include",
      "$NETMANAGER_BASE_NAPI_ROOT/connection/constant/include",
      "$NETMANAGER_BASE_NAPI_ROOT/connection/connection_exec/include",
      "$NETMANAGER_BASE_NAPI_ROOT/connection/connection_module/include",
      "$NETMANAGER_BASE_NAPI_ROOT/connection/observer/include",
      "$NETMANAGER_BASE_NAPI_ROOT/connection/options/include",
    ]
    include_dirs += utils_include
    include_dirs += common_include

    sources = [
      "async_context/src/getaddressbyname_context.cpp",
      "async_context/src/getdefaultnet_context.cpp",
      "async_context/src/parse_nethandle_context.cpp",
      "async_context/src/register_context.cpp",
      "async_work/src/connection_async_work.cpp",
      "connection_exec/src/connection_exec.cpp",
      "connection_module/src/connection_module.cpp",
      "observer/src/net_conn_callback_observer.cpp",
      "options/src/net_address.cpp",
      "options/src/netconnection.cpp",
    ]
    sources += utils_source

    deps = common_deps

    external_deps = common_external_deps

    relative_install_dir = common_relative_install_dir
    part_name = common_part_name
    subsystem_name = common_subsystem_name
  }
} else {
  import("//build/ohos.gni")
  import(
      "//foundation/communication/netmanager_base/netmanager_base_config.gni")

  SUBSYSTEM_DIR = "//foundation/communication"
  NETMANAGER_NAPI_ROOT = "$SUBSYSTEM_DIR/netmanager_base/frameworks/js/napi/"

  ohos_shared_library("connection") {
    include_dirs = [
      "//third_party/node/src",
      "$NETMANAGER_NAPI_ROOT/netconn/include",
      "$NETMANAGER_NAPI_ROOT/common",
      "$SUBSYSTEM_DIR/netmanager_base/services/netconnmanager/include/stub",
      "$SUBSYSTEM_DIR/netmanager_base/services/netconnmanager/include",
      "$NETCONNMANAGER_COMMON_DIR/include",
      "//third_party/libuv/include",
    ]

    sources = [
      "$NETMANAGER_NAPI_ROOT/common/napi_common.cpp",
      "$NETMANAGER_NAPI_ROOT/netconn/src/event_listener_context.cpp",
      "$NETMANAGER_NAPI_ROOT/netconn/src/napi_net_conn.cpp",
      "$NETMANAGER_NAPI_ROOT/netconn/src/napi_net_conn_observer.cpp",
      "$NETMANAGER_NAPI_ROOT/netconn/src/napi_net_connection.cpp",
    ]

    defines = [ "NETMGR_DEBUG" ]

    deps = [
      "$INNERKITS_ROOT/dnsresolverclient:dns_resolver_manager_if",
      "$INNERKITS_ROOT/netconnclient:net_conn_manager_if",
      "$NETMANAGER_BASE_ROOT/utils:net_manager_common",
      "$NETSYSNATIVE_SOURCE_DIR:netsys_native_manager",
      "//foundation/aafwk/standard/frameworks/kits/ability/native:abilitykit_native",
      "//foundation/ace/napi/:ace_napi",
      "//third_party/libuv:uv_static",
      "//utils/native/base:utils",
    ]

    external_deps = [
      "ability_base:want",
      "ces_standard:cesfwk_innerkits",
      "eventhandler:libeventhandler",
      "hiviewdfx_hilog_native:libhilog",
      "ipc:ipc_core",
      "safwk:system_ability_fwk",
      "samgr_standard:samgr_proxy",
    ]

    relative_install_dir = "module/net"
    part_name = "netmanager_base"
    subsystem_name = "communication"
  }
}
