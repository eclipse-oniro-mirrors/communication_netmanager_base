# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/config/components/idl_tool/idl.gni")
import("//build/ohos.gni")
import("//foundation/communication/netmanager_base/netmanager_base_config.gni")

config("net_stats_manager_if_config") {
  # header file path
  include_dirs = [
    "${target_gen_dir}",
    "$INNERKITS_ROOT/include",
    "$INNERKITS_ROOT/netstatsclient/include/proxy",
    "$INNERKITS_ROOT/netstatsclient/include",
    "$INNERKITS_ROOT/netmanagernative/include",
    "$INNERKITS_ROOT/netconnclient/include",
    "$NETSYSNATIVE_SOURCE_DIR/include/netsys",
  ]

  cflags = []
  if (is_double_framework) {
    cflags += [ "-DCONFIG_DUAL_FRAMEWORK" ]
  }
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  if (is_standard_system) {
    cflags += [ "-DCONFIG_STANDARD_SYSTEM" ]
  }
  if (defined(build_public_version) && build_public_version) {
    cflags += [ "-DBUILD_PUBLIC_VERSION" ]
  }
}

ohos_source_set("net_stats_parcel") {
  sources = [
    "$NETSTATSMANAGER_INNERKITS_SOURCE_DIR/src/net_push_stats_info.cpp",
    "$NETSTATSMANAGER_INNERKITS_SOURCE_DIR/src/net_stats_info.cpp",
    "$NETSTATSMANAGER_INNERKITS_SOURCE_DIR/src/net_stats_info_sequence.cpp",
    "$NETSTATSMANAGER_INNERKITS_SOURCE_DIR/src/net_stats_network.cpp",
  ]
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  branch_protector_ret = "pac_ret"

  include_dirs = [ "$INNERKITS_ROOT/netstatsclient/include" ]

  deps = [ "$NETMANAGER_BASE_ROOT/utils:net_manager_common" ]
  external_deps = [ "c_utils:utils" ]
  external_deps += [ "hilog:libhilog" ]

  part_name = "netmanager_base"
  subsystem_name = "communication"
}

idl_gen_interface("netstats_service_interface") {
  sources = [ "INetStatsService.idl" ]
}

config("netstats_service_interface_stub_config") {
  include_dirs = [
    "${target_gen_dir}",
    "include",
    "include/proxy",
  ]
}

ohos_source_set("netstats_service_interface_stub") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  public_configs = [ ":netstats_service_interface_stub_config" ]
  output_values = get_target_outputs(":netstats_service_interface")
  sources = []
  sources += filter_include(output_values, [ "*ice_stub.cpp" ])
  deps = [ ":netstats_service_interface" ]
  external_deps = [
    "hilog:libhilog",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
    "c_utils:utils",
  ]
  part_name = "netmanager_base"
  subsystem_name = "communication"
}

ohos_shared_library("net_stats_manager_if") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    boundary_sanitize = true
    all_ubsan = true
    debug = false
  }

  branch_protector_ret = "pac_ret"

  sources = [
    "$NETSTATSMANAGER_INNERKITS_SOURCE_DIR/src/data_flow_statistics.cpp",
    "$NETSTATSMANAGER_INNERKITS_SOURCE_DIR/src/net_stats_client.cpp",
    "$NETSTATSMANAGER_INNERKITS_SOURCE_DIR/src/proxy/net_stats_callback_stub.cpp",
  ]

  output_values = get_target_outputs(":netstats_service_interface")
  sources += filter_include(output_values, [ "*ice_proxy.cpp" ])

  include_dirs = [
    "$NETMANAGER_BASE_ROOT/utils/common_utils/include",
    "$NETSYSCONTROLLER_ROOT_DIR/include/",
  ]

  version_script = "libnetstats_kits.map"

  public_configs = [ ":net_stats_manager_if_config" ]

  cflags = common_cflags

  cflags_cc = common_cflags
  deps = [
    ":net_stats_parcel",
    "$NETSYSCONTROLLER_ROOT_DIR:netsys_controller",
  ]
  deps += [ ":netstats_service_interface" ]

  external_deps = [
    "bounds_checking_function:libsec_shared",
    "c_utils:utils",
    "ipc:ipc_single",
    "samgr:samgr_proxy",
  ]

  defines = [
    "NETMGR_LOG_TAG = \"NetStatsClient\"",
    "LOG_DOMAIN = 0xD0015B0",
  ]

  if (enable_netmgr_debug) {
    defines += [ "NETMGR_DEBUG" ]
  }

  external_deps += [ "hilog:libhilog" ]

  innerapi_tags = [ "platformsdk" ]
  part_name = "netmanager_base"
  subsystem_name = "communication"
}
