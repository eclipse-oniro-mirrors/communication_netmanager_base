# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//foundation/communication/netmanager_base/netmanager_base_config.gni")

config("net_conn_manager_if_config") {
  # header file path
  include_dirs = [
    "$INNERKITS_ROOT/netconnclient/include",
    "$INNERKITS_ROOT/netconnclient/include/proxy",
    "$INNERKITS_ROOT/include",
    "$NETMANAGER_BASE_ROOT/services/netsyscontroller/include",
    "$NETMANAGER_BASE_ROOT/services/netmanagernative/include/netsys",
    "$NETMANAGER_BASE_ROOT/interfaces/innerkits/netstatsclient/include",
  ]

  cflags = []
  if (is_double_framework) {
    cflags += [ "-DCONFIG_DUAL_FRAMEWORK" ]
  }
  if (target_cpu == "arm") {
    cflags += [ "-DBINDER_IPC_32BIT" ]
  }
  if (is_standard_system) {
    cflags += [ "-DCONFIG_STANDARD_SYSTEM" ]
  }
  if (defined(build_public_version) && build_public_version) {
    cflags += [ "-DBUILD_PUBLIC_VERSION" ]
  }
}

ohos_static_library("net_conn_parcel") {
  sources = [
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/http_proxy.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/inet_addr.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/net_all_capabilities.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/net_interface_config.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/net_link_info.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/net_specifier.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/net_supplier_info.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/route.cpp",
  ]
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }

  branch_protector_ret = "pac_ret"

  include_dirs = [
    "$INNERKITS_ROOT/include",
    "$INNERKITS_ROOT/netconnclient/include",
    "$INNERKITS_ROOT/netmanagernative/include",
    "$NETSYSNATIVE_SOURCE_DIR/include/netsys",
  ]

  deps = [ "$NETMANAGER_BASE_ROOT/utils:net_manager_common" ]

  external_deps = [ "c_utils:utils" ]
  external_deps += [ "hilog:libhilog" ]

  part_name = "netmanager_base"
  subsystem_name = "communication"
}

ohos_shared_library("net_conn_manager_if") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    blocklist = "./connect_blocklist.txt"
    debug = false
  }

  branch_protector_ret = "pac_ret"

  cflags = [
    "-fstack-protector-strong",
    "-D_FORTIFY_SOURCE=2",
    "-O2",
  ]

  cflags_cc = [
    "-fstack-protector-strong",
    "-D_FORTIFY_SOURCE=2",
    "-O2",
  ]

  sources = [
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/net_conn_client.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/net_handle.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/net_supplier_callback_base.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/network_security_config.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/proxy/net_conn_callback_stub.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/proxy/net_conn_service_proxy.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/proxy/net_detection_callback_stub.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/proxy/net_factoryreset_callback_stub.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/proxy/net_interface_callback_stub.cpp",
    "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/proxy/net_supplier_callback_stub.cpp",
  ]

  include_dirs = [
    "$INNERKITS_ROOT/netmanagernative/include",
    "$NETMANAGERNATIVE_ROOT/fwmarkclient/include",
    "$NETMANAGER_BASE_ROOT/utils/log/include",
    "$NETMANAGER_BASE_ROOT/utils/bundle_utils/include",
    "$NETMANAGER_BASE_ROOT/utils/common_utils/include",
    "//third_party/musl/porting/linux/user/src/hook",
  ]

  version_script = "libnetconn_kits.map"

  public_configs = [ ":net_conn_manager_if_config" ]

  deps = [
    ":net_conn_parcel",
    "$NETMANAGER_BASE_ROOT/services/netmanagernative/fwmarkclient:fwmark_client",
  ]

  external_deps = [
    "cJSON:cjson",
    "ipc:ipc_core",
    "openssl:libcrypto_shared",
    "openssl:libssl_shared",
    "samgr:samgr_proxy",
  ]

  defines = [
    "NETMGR_LOG_TAG = \"NetConnManager\"",
    "LOG_DOMAIN = 0xD0015B0",
  ]

  if (enable_netmgr_debug) {
    defines += [ "NETMGR_DEBUG" ]
  }

  external_deps += [ "hilog:libhilog" ]

  innerapi_tags = [
    "platformsdk",
    "sasdk",
  ]
  part_name = "netmanager_base"
  subsystem_name = "communication"
}

config("socket_permission_config") {
  include_dirs = [ "$INNERKITS_ROOT/netconnclient/include" ]
}

ohos_shared_library("socket_permission") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    boundary_sanitize = true
    all_ubsan = true
    blocklist = "./connect_blocklist.txt"
    debug = false
  }

  branch_protector_ret = "pac_ret"

  cflags = [
    "-fstack-protector-strong",
    "-D_FORTIFY_SOURCE=2",
    "-O2",
  ]

  cflags_cc = [
    "-fstack-protector-strong",
    "-D_FORTIFY_SOURCE=2",
    "-O2",
  ]

  sources = [ "$NETCONNMANAGER_INNERKITS_SOURCE_DIR/src/socket_permission.cpp" ]
  deps = [ "$INNERKITS_ROOT/netconnclient:net_conn_manager_if" ]
  public_configs = [ ":socket_permission_config" ]
  part_name = "netmanager_base"
  subsystem_name = "communication"
}
