# Copyright (c) 2023-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{
  global:
    extern "C++" {
      VTT?for?OHOS::NetManagerStandard::NetAllCapabilities;
      vtable?for?OHOS::NetManagerStandard::NetAllCapabilities;
      "OHOS::NetManagerStandard::NetAllCapabilities::operator=(OHOS::NetManagerStandard::NetAllCapabilities const&)";
      "OHOS::NetManagerStandard::NetAllCapabilities::NetAllCapabilities(OHOS::NetManagerStandard::NetAllCapabilities const&)";
      VTT?for?OHOS::NetManagerStandard::HttpProxy;
      vtable?for?OHOS::NetManagerStandard::HttpProxy;
      "OHOS::NetManagerStandard::HttpProxy::HttpProxy()";
      VTT?for?OHOS::NetManagerStandard::NetLinkInfo;
      vtable?for?OHOS::NetManagerStandard::NetLinkInfo;
      "OHOS::NetManagerStandard::INetAddr::Marshalling(OHOS::Parcel&) const";
      "OHOS::NetManagerStandard::INetAddr::Unmarshalling(OHOS::Parcel&)";
      "OHOS::NetManagerStandard::Route::Marshalling(OHOS::Parcel&) const";
      "OHOS::NetManagerStandard::Route::Unmarshalling(OHOS::Parcel&)";
      "OHOS::NetManagerStandard::NetHandle::BindSocket(int)";
      "OHOS::NetManagerStandard::NetConnClient::HasDefaultNet(bool&)";
      "OHOS::NetManagerStandard::NetConnClient::IsDefaultNetMetered(bool&)";
      "OHOS::NetManagerStandard::NetConnClient::GetInstance()";
      "OHOS::NetManagerStandard::NetConnClient::GetIfaceNameIdentMaps(OHOS::NetManagerStandard::NetBearType, std::__h::unordered_map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, std::__h::hash<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>, std::__h::equal_to<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>>>&)";
      "OHOS::NetManagerStandard::NetConnClient::GetConnectionProperties(OHOS::NetManagerStandard::NetHandle const&, OHOS::NetManagerStandard::NetLinkInfo&)";
      "OHOS::NetManagerStandard::NetConnClient::GetAllNets(std::__h::list<OHOS::sptr<OHOS::NetManagerStandard::NetHandle>, std::__h::allocator<OHOS::sptr<OHOS::NetManagerStandard::NetHandle>>>&)";
      "OHOS::NetManagerStandard::NetConnClient::IsPreferCellularUrl(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, bool&)";
      "OHOS::NetManagerStandard::NetConnClient::SetAirplaneMode(bool)";
      "OHOS::NetManagerStandard::NetConnClient::NetDetection(OHOS::NetManagerStandard::NetHandle const&)";
      "OHOS::NetManagerStandard::NetConnClient::GetGlobalHttpProxy(OHOS::NetManagerStandard::HttpProxy&)";
      "OHOS::NetManagerStandard::NetConnClient::InterfaceSetIffUp(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::NetConnClient::SetGlobalHttpProxy(OHOS::NetManagerStandard::HttpProxy const&)";
      "OHOS::NetManagerStandard::NetConnClient::SetAppHttpProxy(OHOS::NetManagerStandard::HttpProxy const&)";
      "OHOS::NetManagerStandard::NetConnClient::UnregisterAppHttpProxyCallback(unsigned int)";
      "OHOS::NetManagerStandard::NetConnClient::RegisterAppHttpProxyCallback(std::__h::function<void (OHOS::NetManagerStandard::HttpProxy const&)>, unsigned int&)";
      "OHOS::NetManagerStandard::NetConnClient::GetAppNet(int&)";
      "OHOS::NetManagerStandard::NetConnClient::SetAppNet(int)";
      "OHOS::NetManagerStandard::NetConnClient::RegisterSlotType(unsigned int, int)";
      "OHOS::NetManagerStandard::NetConnClient::GetSlotType(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>&)";
      "OHOS::NetManagerStandard::NetConnClient::GetDefaultNet(OHOS::NetManagerStandard::NetHandle&)";
      "OHOS::NetManagerStandard::NetConnClient::GetNetCapabilities(OHOS::NetManagerStandard::NetHandle const&, OHOS::NetManagerStandard::NetAllCapabilities&)";
      "OHOS::NetManagerStandard::NetConnClient::GetAddressesByName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, int, std::__h::vector<OHOS::NetManagerStandard::INetAddr, std::__h::allocator<OHOS::NetManagerStandard::INetAddr>>&)";
      "OHOS::NetManagerStandard::NetConnClient::GetAddressByName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, int, OHOS::NetManagerStandard::INetAddr&)";
      "OHOS::NetManagerStandard::NetConnClient::BindSocket(int, int)";
      "OHOS::NetManagerStandard::NetConnClient::OnRemoteDied(OHOS::wptr<OHOS::IRemoteObject> const&)";
      "OHOS::NetManagerStandard::NetConnClient::NetConnClient()";
      "OHOS::NetManagerStandard::NetConnClient::~NetConnClient()";
      "OHOS::NetManagerStandard::NetConnClient::RequestNetConnection(OHOS::sptr<OHOS::NetManagerStandard::NetSpecifier>, OHOS::sptr<OHOS::NetManagerStandard::INetConnCallback>, unsigned int)";
      "OHOS::NetManagerStandard::NetConnClient::RegisterNetConnCallback(OHOS::sptr<OHOS::NetManagerStandard::NetSpecifier> const&, OHOS::sptr<OHOS::NetManagerStandard::INetConnCallback>, unsigned int const&)";
      "OHOS::NetManagerStandard::NetConnClient::RegisterNetConnCallback(OHOS::sptr<OHOS::NetManagerStandard::INetConnCallback>)";
      "OHOS::NetManagerStandard::NetConnClient::RegisterPreAirplaneCallback(OHOS::sptr<OHOS::NetManagerStandard::IPreAirplaneCallback>)";
      "OHOS::NetManagerStandard::NetConnClient::SetInternetPermission(unsigned int, unsigned char)";
      "OHOS::NetManagerStandard::NetConnClient::UnregisterNetConnCallback(OHOS::sptr<OHOS::NetManagerStandard::INetConnCallback> const&)";
      "OHOS::NetManagerStandard::NetConnClient::UpdateSupplierScore(OHOS::NetManagerStandard::NetBearType, bool)";
      "OHOS::NetManagerStandard::NetConnClient::RegisterNetSupplier(OHOS::NetManagerStandard::NetBearType, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::set<OHOS::NetManagerStandard::NetCap, std::__h::less<OHOS::NetManagerStandard::NetCap>, std::__h::allocator<OHOS::NetManagerStandard::NetCap>> const&, unsigned int&)";
      "OHOS::NetManagerStandard::NetConnClient::RegisterNetSupplierCallback(unsigned int, OHOS::sptr<OHOS::NetManagerStandard::NetSupplierCallbackBase> const&)";
      "OHOS::NetManagerStandard::NetConnClient::UnregisterNetSupplier(unsigned int)";
      "OHOS::NetManagerStandard::NetConnClient::RegisterNetDetectionCallback(int, OHOS::sptr<OHOS::NetManagerStandard::INetDetectionCallback> const&)";
      "OHOS::NetManagerStandard::NetConnClient::UnRegisterNetDetectionCallback(int, OHOS::sptr<OHOS::NetManagerStandard::INetDetectionCallback> const&)";
      "OHOS::NetManagerStandard::NetConnClient::UpdateNetSupplierInfo(unsigned int, OHOS::sptr<OHOS::NetManagerStandard::NetSupplierInfo> const&)";
      "OHOS::NetManagerStandard::NetConnClient::UpdateNetLinkInfo(unsigned int, OHOS::sptr<OHOS::NetManagerStandard::NetLinkInfo> const&)";
      "OHOS::NetManagerStandard::NetConnClient::SystemReady()";
      "OHOS::NetManagerStandard::NetConnClient::GetDefaultHttpProxy(OHOS::NetManagerStandard::HttpProxy&)";
      "OHOS::NetManagerStandard::NetConnClient::GetNetIdByIdentifier(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::list<int, std::__h::allocator<int>>&)";
      "OHOS::NetManagerStandard::NetConnClient::GetNetInterfaceConfiguration(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, OHOS::NetManagerStandard::NetInterfaceConfiguration&)";
      "OHOS::NetManagerStandard::NetConnClient::RegisterNetInterfaceCallback(OHOS::sptr<OHOS::NetManagerStandard::INetInterfaceStateCallback> const&)";
      "OHOS::NetManagerStandard::NetConnClient::AddNetworkRoute(int, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::NetConnClient::RemoveNetworkRoute(int, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::NetConnClient::DelStaticArp(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::NetConnClient::AddStaticArp(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::NetConnClient::DelInterfaceAddress(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, int)";
      "OHOS::NetManagerStandard::NetConnClient::AddInterfaceAddress(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, int)";
      "OHOS::NetManagerStandard::NetConnClient::GetPinSetForHostName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>&)";
      "OHOS::NetManagerStandard::NetConnClient::GetTrustAnchorsForHostName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>>&)";
      VTT?for?OHOS::NetManagerStandard::NetworkSecurityConfig;
      vtable?for?OHOS::NetManagerStandard::NetworkSecurityConfig;
      "OHOS::NetManagerStandard::NetworkSecurityConfig::NetworkSecurityConfig()";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::~NetworkSecurityConfig()";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::GetInstance()";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::GetRehashedCADirName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::BuildRehasedCAPath(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::GetRehasedCAPath(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::ReHashCAPathForX509(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::ReadCertFile(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::AddSurfixToCACertFileName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::set<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>>&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>&)";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::GetCAFilesFromPath(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, std::__h::vector<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>>&)";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::IsCACertFileName(char const*)";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::ParseJsonPinSet(cJSON const*, OHOS::NetManagerStandard::PinSet&)";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::ParseJsonDomains(cJSON const*, std::__h::vector<OHOS::NetManagerStandard::Domain, std::__h::allocator<OHOS::NetManagerStandard::Domain>>&)";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::ParseJsonTrustAnchors(cJSON const*, OHOS::NetManagerStandard::TrustAnchors&)";
      "OHOS::NetManagerStandard::NetworkSecurityConfig::GetPinSetForHostName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>&)";
      "OHOS::NetManagerStandard::NetConnClient::FactoryResetNetwork()";
      "OHOS::NetManagerStandard::NetConnClient::RegisterNetFactoryResetCallback(OHOS::sptr<OHOS::NetManagerStandard::INetFactoryResetCallback> const&)";
      VTT?for?OHOS::NetManagerStandard::NetSpecifier;
      vtable?for?OHOS::NetManagerStandard::NetSpecifier;
      "OHOS::NetManagerStandard::NetLinkInfo::NetLinkInfo(OHOS::NetManagerStandard::NetLinkInfo const&)";
      "OHOS::NetManagerStandard::NetConnCallbackStub::~NetConnCallbackStub()";
      "OHOS::NetManagerStandard::NetConnCallbackStub::OnRemoteRequest(unsigned int, OHOS::MessageParcel&, OHOS::MessageParcel&, OHOS::MessageOption&)";
      "OHOS::NetManagerStandard::NetConnCallbackStub::~NetConnCallbackStub()";
      "OHOS::NetManagerStandard::NetConnCallbackStub::NetAvailable(OHOS::sptr<OHOS::NetManagerStandard::NetHandle>&)";
      "OHOS::NetManagerStandard::NetConnCallbackStub::NetCapabilitiesChange(OHOS::sptr<OHOS::NetManagerStandard::NetHandle>&, OHOS::sptr<OHOS::NetManagerStandard::NetAllCapabilities> const&)";
      "OHOS::NetManagerStandard::NetConnCallbackStub::NetConnectionPropertiesChange(OHOS::sptr<OHOS::NetManagerStandard::NetHandle>&, OHOS::sptr<OHOS::NetManagerStandard::NetLinkInfo> const&)";
      "OHOS::NetManagerStandard::NetConnCallbackStub::NetLost(OHOS::sptr<OHOS::NetManagerStandard::NetHandle>&)";
      "OHOS::NetManagerStandard::NetConnCallbackStub::NetUnavailable()";
      "OHOS::NetManagerStandard::NetConnCallbackStub::OnNetLost(OHOS::MessageParcel&, OHOS::MessageParcel&)";
      "OHOS::NetManagerStandard::NetConnCallbackStub::OnNetBlockStatusChange(OHOS::MessageParcel&, OHOS::MessageParcel&)";
      "OHOS::NetManagerStandard::NetConnCallbackStub::NetConnCallbackStub()";
      "OHOS::NetManagerStandard::NetConnCallbackStub::NetBlockStatusChange(OHOS::sptr<OHOS::NetManagerStandard::NetHandle>&, bool)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetConnCallbackStub::~NetConnCallbackStub()";
      "non-virtual thunk to OHOS::NetManagerStandard::NetConnCallbackStub::NetAvailable(OHOS::sptr<OHOS::NetManagerStandard::NetHandle>&)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetConnCallbackStub::NetCapabilitiesChange(OHOS::sptr<OHOS::NetManagerStandard::NetHandle>&, OHOS::sptr<OHOS::NetManagerStandard::NetAllCapabilities> const&)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetConnCallbackStub::NetConnectionPropertiesChange(OHOS::sptr<OHOS::NetManagerStandard::NetHandle>&, OHOS::sptr<OHOS::NetManagerStandard::NetLinkInfo> const&)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetConnCallbackStub::NetLost(OHOS::sptr<OHOS::NetManagerStandard::NetHandle>&)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetConnCallbackStub::NetUnavailable()";
      "non-virtual thunk to OHOS::NetManagerStandard::NetConnCallbackStub::NetBlockStatusChange(OHOS::sptr<OHOS::NetManagerStandard::NetHandle>&, bool)";
      "virtual thunk to OHOS::NetManagerStandard::NetConnCallbackStub::~NetConnCallbackStub()";
      "OHOS::NetManagerStandard::NetAllCapabilities::ToString(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&) const";
      "OHOS::NetManagerStandard::NetLinkInfo::ToString(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&) const";
      VTT?for?OHOS::NetManagerStandard::INetAddr;
      vtable?for?OHOS::NetManagerStandard::INetAddr;
      VTT?for?OHOS::NetManagerStandard::NetSupplierInfo;
      vtable?for?OHOS::NetManagerStandard::NetSupplierInfo;
      VTT?for?OHOS::NetManagerStandard::Route;
      vtable?for?OHOS::NetManagerStandard::Route;
      "OHOS::NetManagerStandard::DataFlowStatistics::GetIfaceTxPackets(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::DataFlowStatistics::GetIfaceRxPackets(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::NetSupplierCallbackBase::RequestNetwork(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::set<OHOS::NetManagerStandard::NetCap, std::__h::less<OHOS::NetManagerStandard::NetCap>, std::__h::allocator<OHOS::NetManagerStandard::NetCap>> const&)";
      "OHOS::NetManagerStandard::NetSupplierCallbackBase::ReleaseNetwork(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::set<OHOS::NetManagerStandard::NetCap, std::__h::less<OHOS::NetManagerStandard::NetCap>, std::__h::allocator<OHOS::NetManagerStandard::NetCap>> const&)";
      "OHOS::NetManagerStandard::NetSupplierCallbackStub::NetSupplierCallbackStub()";
      "OHOS::NetManagerStandard::NetSupplierCallbackStub::~NetSupplierCallbackStub()";
      "OHOS::NetManagerStandard::NetSupplierCallbackStub::OnRemoteRequest(unsigned int, OHOS::MessageParcel&, OHOS::MessageParcel&, OHOS::MessageOption&)";
      "OHOS::NetManagerStandard::NetSupplierCallbackStub::RequestNetwork(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::set<OHOS::NetManagerStandard::NetCap, std::__h::less<OHOS::NetManagerStandard::NetCap>, std::__h::allocator<OHOS::NetManagerStandard::NetCap>> const&)";
      "OHOS::NetManagerStandard::NetSupplierCallbackStub::ReleaseNetwork(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::set<OHOS::NetManagerStandard::NetCap, std::__h::less<OHOS::NetManagerStandard::NetCap>, std::__h::allocator<OHOS::NetManagerStandard::NetCap>> const&)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetSupplierCallbackStub::RequestNetwork(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::set<OHOS::NetManagerStandard::NetCap, std::__h::less<OHOS::NetManagerStandard::NetCap>, std::__h::allocator<OHOS::NetManagerStandard::NetCap>> const&)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetSupplierCallbackStub::ReleaseNetwork(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::set<OHOS::NetManagerStandard::NetCap, std::__h::less<OHOS::NetManagerStandard::NetCap>, std::__h::allocator<OHOS::NetManagerStandard::NetCap>> const&)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetSupplierCallbackStub::~NetSupplierCallbackStub()";
      "virtual thunk to OHOS::NetManagerStandard::NetSupplierCallbackStub::~NetSupplierCallbackStub()";
      vtable?for?OHOS::NetManagerStandard::NetSupplierCallbackBase;
      "OHOS::NetManagerStandard::NetDetectionCallbackStub::NetDetectionCallbackStub()";
      "OHOS::NetManagerStandard::NetDetectionCallbackStub::OnNetDetectionResult(OHOS::MessageParcel&, OHOS::MessageParcel&)";
      "OHOS::NetManagerStandard::NetDetectionCallbackStub::~NetDetectionCallbackStub()";
      "OHOS::NetManagerStandard::NetDetectionCallbackStub::OnRemoteRequest(unsigned int, OHOS::MessageParcel&, OHOS::MessageParcel&, OHOS::MessageOption&)";
      "OHOS::NetManagerStandard::NetDetectionCallbackStub::OnNetDetectionResultChanged(OHOS::NetManagerStandard::NetDetectionResultCode, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetDetectionCallbackStub::OnNetDetectionResultChanged(OHOS::NetManagerStandard::NetDetectionResultCode, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetDetectionCallbackStub::~NetDetectionCallbackStub()";
      "virtual thunk to OHOS::NetManagerStandard::NetDetectionCallbackStub::~NetDetectionCallbackStub()";
      "OHOS::NetManagerStandard::NetHandle::GetAddressesByName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::vector<OHOS::NetManagerStandard::INetAddr, std::__h::allocator<OHOS::NetManagerStandard::INetAddr>>&)";
      "OHOS::NetManagerStandard::NetHandle::GetAddressByName(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, OHOS::NetManagerStandard::INetAddr&)";
      "OHOS::NetManagerStandard::NetSupplierCallbackStub::RegisterSupplierCallbackImpl(OHOS::sptr<OHOS::NetManagerStandard::NetSupplierCallbackBase> const&)";
      "OHOS::NetManagerStandard::HttpProxy::GetHost() const";
      "OHOS::NetManagerStandard::HttpProxy::GetPort() const";
      "OHOS::NetManagerStandard::HttpProxy::Unmarshalling(OHOS::Parcel&, OHOS::NetManagerStandard::HttpProxy&)";
      "OHOS::NetManagerStandard::HttpProxy::Marshalling(OHOS::Parcel&) const";
      "OHOS::NetManagerStandard::HttpProxy::GetExclusionList() const";
      "OHOS::NetManagerStandard::HttpProxy::HttpProxy(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, unsigned short, std::__h::list<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, std::__h::allocator<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>> const&)";
      "OHOS::NetManagerStandard::NetConnServiceProxy::NetConnServiceProxy(OHOS::sptr<OHOS::IRemoteObject> const&)";
      VTT?for?OHOS::NetManagerStandard::NetInterfaceStateCallbackStub;
      vtable?for?OHOS::NetManagerStandard::NetInterfaceStateCallbackStub;
      "OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::NetInterfaceStateCallbackStub()";
      "OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::OnRemoteRequest(unsigned int, OHOS::MessageParcel&, OHOS::MessageParcel&, OHOS::MessageOption&)";
      "OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::OnInterfaceAddressUpdated(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, int, int)";
      "OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::OnInterfaceAddressRemoved(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, int, int)";
      "OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::OnInterfaceAdded(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::OnInterfaceRemoved(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::OnInterfaceChanged(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, bool)";
      "OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::OnInterfaceLinkStateChanged(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, bool)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::OnInterfaceAddressUpdated(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, int, int)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::OnInterfaceAddressRemoved(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, int, int)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::OnInterfaceAdded(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::OnInterfaceRemoved(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::OnInterfaceChanged(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, bool)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetInterfaceStateCallbackStub::OnInterfaceLinkStateChanged(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, bool)";
      VTT?for?OHOS::NetManagerStandard::NetFactoryResetCallbackStub;
      vtable?for?OHOS::NetManagerStandard::NetFactoryResetCallbackStub;
      "OHOS::NetManagerStandard::NetFactoryResetCallbackStub::NetFactoryResetCallbackStub()";
      "OHOS::NetManagerStandard::NetFactoryResetCallbackStub::~NetFactoryResetCallbackStub()";
      "OHOS::NetManagerStandard::NetFactoryResetCallbackStub::OnNetFactoryReset()";
      "OHOS::NetManagerStandard::NetFactoryResetCallbackStub::OnRemoteRequest(unsigned int, OHOS::MessageParcel&, OHOS::MessageParcel&, OHOS::MessageOption&)";
      "non-virtual thunk to OHOS::NetManagerStandard::NetFactoryResetCallbackStub::~NetFactoryResetCallbackStub()";
      "non-virtual thunk to OHOS::NetManagerStandard::NetFactoryResetCallbackStub::OnNetFactoryReset()";
      "virtual thunk to OHOS::NetManagerStandard::NetFactoryResetCallbackStub::~NetFactoryResetCallbackStub()";
      "OHOS::NetManagerStandard::PreAirplaneCallbackStub::OnRemoteRequest(unsigned int, OHOS::MessageParcel&, OHOS::MessageParcel&, OHOS::MessageOption&)";
      "non-virtual thunk to OHOS::NetManagerStandard::PreAirplaneCallbackStub::~PreAirplaneCallbackStub()";
      "non-virtual thunk to OHOS::NetManagerStandard::PreAirplaneCallbackStub::PreAirplaneStart()";
      "OHOS::NetManagerStandard::PreAirplaneCallbackStub::~PreAirplaneCallbackStub()";
      "OHOS::NetManagerStandard::PreAirplaneCallbackStub::PreAirplaneStart()";
      "virtual thunk to OHOS::NetManagerStandard::PreAirplaneCallbackStub::~PreAirplaneCallbackStub()";
      "OHOS::NetManagerStandard::PreAirplaneCallbackStub::PreAirplaneCallbackStub()";
      "OHOS::NetManagerStandard::NetProxyUserinfo::GetInstance()";
      "OHOS::NetManagerStandard::NetProxyUserinfo::SaveHttpProxyHostPass(OHOS::NetManagerStandard::HttpProxy const&)";
      "OHOS::NetManagerStandard::NetProxyUserinfo::GetHttpProxyHostPass(OHOS::NetManagerStandard::HttpProxy&)";
      "vtable for OHOS::NetManagerStandard::PreAirplaneCallbackStub";
      "VTT for OHOS::NetManagerStandard::PreAirplaneCallbackStub";
      "VTT?for?OHOS::NetManagerStandard::PreAirplaneCallbackStub";
      "OHOS::NetManagerStandard::NetConnClient::UnregisterPreAirplaneCallback(OHOS::sptr<OHOS::NetManagerStandard::IPreAirplaneCallback>)";
    };
  local:
   *;
};
