            "netmanager_base_enable_set_app_frozened",
            "netmanager_base_feature_enterprise_route_custom"





#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
constexpr int32_t RULE_LEVEL_ENTERPRISE = 15000;
#endif





 
#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
/* route target uid to enterprise inner net */
int32_t RouteManager::UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add)
{
    NETNATIVE_LOGI("UpdateEnterpriseRoute,interfaceName:%{public}s, uid:%{public}u, add:%{public}d ",
        interfaceName.c_str(), uid, add);
    uint32_t table = FindTableByInterfacename(interfaceName);
    if (table == RT_TABLE_UNSPEC) {
        NETNATIVE_LOGE("find table by name fail");
        return NETMANAGER_ERR_PARAMETER_ERROR;
    }
 
    RuleInfo ruleInfo;
    ruleInfo.ruleTable = table;
    ruleInfo.rulePriority = RULE_LEVEL_ENTERPRISE;
    uint16_t action = add ? RTM_NEWRULE : RTM_DELRULE;
 
    if (uid != 0) {
        return UpdateRuleInfo(action, FR_ACT_TO_TBL, ruleInfo, uid, uid);
    }
 
    return UpdateRuleInfo(action, FR_ACT_TO_TBL, ruleInfo);
}
#endif

















 
#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
int32_t NetsysNativeServiceProxy::UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add)
{
    NETNATIVE_LOG_D("Begin to UpdateEnterpriseRoute");
    MessageParcel data;
    if (!WriteInterfaceToken(data)) {
        NETNATIVE_LOGE("UpdateEnterpriseRoute WriteInterfaceToken failed");
        return ERR_FLATTEN_OBJECT;
    }
 
    if (!data.WriteString(interfaceName)) {
        NETNATIVE_LOGE("UpdateEnterpriseRoute WriteString interfaceName failed");
        return ERR_FLATTEN_OBJECT;
    }
 
    if (!data.WriteUint32(uid)) {
        NETNATIVE_LOGE("UpdateEnterpriseRoute WriteUint32 uid failed");
        return ERR_FLATTEN_OBJECT;
    }
 
    if (!data.WriteBool(add)) {
        NETNATIVE_LOGE("UpdateEnterpriseRoute WriteBool add failed");
        return ERR_FLATTEN_OBJECT;
    }
 
    if (Remote() == nullptr) {
        NETNATIVE_LOGE("Remote is null in UpdateEnterpriseRoute");
        return ERR_FLATTEN_OBJECT;
    }
 
    MessageParcel reply;
    MessageOption option;
    int32_t err = Remote()->SendRequest(static_cast<uint32_t>(NetsysInterfaceCode::NETSYS_UPDATE_ENTERPRISE_ROUTE),
        data, reply, option);
    if (err != ERR_NONE) {
        NETNATIVE_LOGE("UpdateEnterpriseRoute SendRequest failed, error code: [%{public}d]", err);
        return IPC_INVOKER_ERR;
    }
 
    int32_t ret;
    if (!reply.ReadInt32(ret)) {
        NETNATIVE_LOGE("UpdateEnterpriseRoute ReadInt32 failed");
        return ERR_FLATTEN_OBJECT;
    }
    return ret;
}
#endif
 






  if (netmanager_base_feature_enterprise_route_custom) {
    defines += [ "FEATURE_ENTERPRISE_ROUTE_CUSTOM" ]
  }






#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    virtual int32_t UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add) = 0;
#endif



#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    NETSYS_UPDATE_ENTERPRISE_ROUTE,
#endif





#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    int32_t UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add) override;
#endif



  netmanager_base_feature_enterprise_route_custom = false






  if (netmanager_base_enable_feature_net_firewall) {
    defines += [ "FEATURE_NET_FIREWALL_ENABLE" ]
  }
 
  if (netmanager_base_feature_enterprise_route_custom) {
    defines += [ "FEATURE_ENTERPRISE_ROUTE_CUSTOM" ]
  }





 
  if (netmanager_base_feature_enterprise_route_custom) {
    defines += [ "FEATURE_ENTERPRISE_ROUTE_CUSTOM" ]
  }





#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    /**
     * update enterprise route rules
     *
     * @param interfaceName Network if name
     * @param uid app uid
     * @param add true add, false remove
     * @return Returns 0, update successfully, otherwise it will fail
     */
    static int32_t UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add);
#endif





#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    int32_t UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add);
#endif




#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    int32_t UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add) override;
#endif



#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    void InitEnterpriseMap();
#endif



#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    int32_t CmdUpdateEnterpriseRoute(MessageParcel &data, MessageParcel &reply);
#endif






#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
int32_t NetManagerNative::UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add)
{
    return routeManager_->UpdateEnterpriseRoute(interfaceName, uid, add);
}
#endif
 



 
#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
int32_t NetsysNativeService::UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add)
{
    NETNATIVE_LOG_D("UpdateEnterpriseRoute");
    if (netsysService_ == nullptr) {
        NETNATIVE_LOGE("netsysService_ is null");
        return NetManagerStandard::NETMANAGER_ERR_LOCAL_PTR_NULL;
    }
    return netsysService_->UpdateEnterpriseRoute(interfaceName, uid, add);
}
#endif
 




#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    InitEnterpriseMap();
#endif


#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
void NetsysNativeServiceStub::InitEnterpriseMap()
{
    opToInterfaceMap_[static_cast<uint32_t>(NetsysInterfaceCode::NETSYS_UPDATE_ENTERPRISE_ROUTE)] =
        &NetsysNativeServiceStub::CmdUpdateEnterpriseRoute;
}
#endif
 






#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
int32_t NetsysNativeServiceStub::CmdUpdateEnterpriseRoute(MessageParcel &data, MessageParcel &reply)
{
    if (!NetManagerStandard::NetManagerPermission::CheckNetSysInternalPermission(
        NetManagerStandard::Permission::NETSYS_INTERNAL)) {
        NETNATIVE_LOGE("CmdUpdateEnterpriseRoute CheckNetSysInternalPermission failed");
        return NETMANAGER_ERR_PERMISSION_DENIED;
    }
    
    std::string interfaceName;
    if (!data.ReadString(interfaceName)) {
        NETNATIVE_LOGE("CmdUpdateEnterpriseRoute read interfaceName failed");
        return ERR_FLATTEN_OBJECT;
    }
 
    uint32_t uid = 0;
    if (!data.ReadUint32(uid)) {
        NETNATIVE_LOGE("CmdUpdateEnterpriseRoute read uid failed");
        return ERR_FLATTEN_OBJECT;
    }
 
    bool add = 0;
    if (!data.ReadBool(add)) {
        NETNATIVE_LOGE("CmdUpdateEnterpriseRoute read add failed");
        return ERR_FLATTEN_OBJECT;
    }
 
    int32_t result = UpdateEnterpriseRoute(interfaceName, uid, add);
    if (!reply.WriteInt32(result)) {
        NETNATIVE_LOGE("Write CmdUpdateEnterpriseRoute result failed");
        return ERR_FLATTEN_OBJECT;
    }
 
    return NetManagerStandard::NETMANAGER_SUCCESS;
}
#endif
 

  if (netmanager_base_feature_enterprise_route_custom) {
    defines += [ "FEATURE_ENTERPRISE_ROUTE_CUSTOM" ]
  }
 


  if (netmanager_base_feature_enterprise_route_custom) {
    defines += [ "FEATURE_ENTERPRISE_ROUTE_CUSTOM" ]
  }
 



#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    virtual int32_t UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add) = 0;
#endif



#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    int32_t UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add);
#endif



#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    int32_t UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add) override;
#endif


#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    int32_t UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add);
#endif



 
#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
int32_t NetsysController::UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add)
{
    NETMGR_LOG_I("UpdateEnterpriseRoute");
    if (netsysService_ == nullptr) {
        NETMGR_LOG_E("netsysService_ is null");
        return NETSYS_NETSYSSERVICE_NULL;
    }
    return netsysService_->UpdateEnterpriseRoute(interfaceName, uid, add);
}
#endif
 


 
#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
int32_t NetsysControllerServiceImpl::UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add)
{
    NETMGR_LOG_I("UpdateEnterpriseRoute Enter. uid[%{public}u]", uid);
    return netsysClient_->UpdateEnterpriseRoute(interfaceName, uid, add);
}
#endif
 






#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
int32_t NetsysNativeClient::UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add)
{
    auto proxy = GetProxy();
    if (proxy == nullptr) {
        NETMGR_LOG_E("proxy is nullptr");
        return NETMANAGER_ERR_GET_PROXY_FAIL;
    }
    return proxy->UpdateEnterpriseRoute(interfaceName, uid, add);
}
#endif
 



 
#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    int32_t UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add) override
    {
        return 0;
    }
#endif




 
#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
HWTEST_F(NetsysControllerServiceImplTest, UpdateEnterpriseRouteTest001, TestSize.Level1)
{
    uint32_t uid = 20000138;
    std::string ifname = "wlan0";
    bool add = true;
    auto ret = instance_->UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_SUCCESS);
}
 
HWTEST_F(NetsysControllerServiceImplTest, UpdateEnterpriseRouteTest002, TestSize.Level1)
{
    uint32_t uid = 0;
    std::string ifname = "wlan0";
    bool add = true;
    auto ret = instance_->UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_SUCCESS);
}
 
HWTEST_F(NetsysControllerServiceImplTest, UpdateEnterpriseRouteTest003, TestSize.Level1)
{
    uint32_t uid = 20000138;
    std::string ifname = "notexist";
    bool add = true;
    auto ret = instance_->UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_ERR_PARAMETER_ERROR);
}
#endif
 



#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
HWTEST_F(NetsysControllerTest, UpdateEnterpriseRouteTest001, TestSize.Level1)
{
    uint32_t uid = 20000138;
    std::string ifname = "wlan0";
    bool add = true;
    auto ret = NetsysController::GetInstance().UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_SUCCESS);
}
 
HWTEST_F(NetsysControllerTest, UpdateEnterpriseRouteTest002, TestSize.Level1)
{
    uint32_t uid = 0;
    std::string ifname = "wlan0";
    bool add = true;
    auto ret = NetsysController::GetInstance().UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_SUCCESS);
}
 
HWTEST_F(NetsysControllerTest, UpdateEnterpriseRouteTest003, TestSize.Level1)
{
    uint32_t uid = 20000138;
    std::string ifname = "notexist";
    bool add = true;
    auto ret = NetsysController::GetInstance().UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_ERR_PARAMETER_ERROR);
}
#endif
 


#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
HWTEST_F(NetsysNativeClientTest, UpdateEnterpriseRouteTest001, TestSize.Level1)
{
    uint32_t uid = 20000138;
    std::string ifname = "wlan0";
    bool add = true;
    auto ret = nativeClient_.UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_SUCCESS);
}
 
HWTEST_F(NetsysNativeClientTest, UpdateEnterpriseRouteTest002, TestSize.Level1)
{
    uint32_t uid = 0;
    std::string ifname = "wlan0";
    bool add = true;
    auto ret = nativeClient_.UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_SUCCESS);
}
 
HWTEST_F(NetsysNativeClientTest, UpdateEnterpriseRouteTest003, TestSize.Level1)
{
    uint32_t uid = 20000138;
    std::string ifname = "notexist";
    bool add = true;
    auto ret = nativeClient_.UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_ERR_PARAMETER_ERROR);
}
#endif
 





#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
HWTEST_F(NetsysNativeServiceProxyTest, UpdateEnterpriseRouteTest001, TestSize.Level1)
{
    OHOS::sptr<OHOS::NetsysNative::INetsysService> netsysNativeService = ConnManagerGetProxy();
    ASSERT_NE(netsysNativeService, nullptr);
    uint32_t uid = 20000138;
    std::string ifname = "wlan0";
    bool add = true;
    auto ret = netsysNativeService->UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_SUCCESS);
}
 
HWTEST_F(NetsysNativeServiceProxyTest, UpdateEnterpriseRouteTest002, TestSize.Level1)
{
    OHOS::sptr<OHOS::NetsysNative::INetsysService> netsysNativeService = ConnManagerGetProxy();
    ASSERT_NE(netsysNativeService, nullptr);
    uint32_t uid = 0;
    std::string ifname = "wlan0";
    bool add = true;
    auto ret = netsysNativeService->UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_SUCCESS);
}
 
HWTEST_F(NetsysNativeServiceProxyTest, UpdateEnterpriseRouteTest003, TestSize.Level1)
{
    OHOS::sptr<OHOS::NetsysNative::INetsysService> netsysNativeService = ConnManagerGetProxy();
    ASSERT_NE(netsysNativeService, nullptr);
    uint32_t uid = 20000138;
    std::string ifname = "notexist";
    bool add = true;
    auto ret = netsysNativeService->UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_ERR_PARAMETER_ERROR);
}
#endif
 



#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
    int32_t UpdateEnterpriseRoute(const std::string &interfaceName, uint32_t uid, bool add) override
    {
        return 0;
    }
#endif




#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
HWTEST_F(NetsysNativeServiceStubTest, CmdUpdateEnterpriseRoute001, TestSize.Level1)
{
    uint32_t uid = 20000138;
    std::string ifname = "wlan0";
    bool add = true;
 
    MessageParcel data;
    if (!data.WriteString(ifname)) {
        return;
    }
 
    if (!data.WriteUint32(uid)) {
        return;
    }
 
    if (!data.WriteBool(add)) {
        return;
    }
 
    MessageParcel reply;
    int32_t ret = notifyStub_->CmdUpdateEnterpriseRoute(data, reply);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_SUCCESS);
}
 
HWTEST_F(NetsysNativeServiceStubTest, CmdUpdateEnterpriseRoute002, TestSize.Level1)
{
    MessageParcel data;
    MessageParcel reply;
    int32_t ret = notifyStub_->CmdUpdateEnterpriseRoute(data, reply);
    EXPECT_EQ(ret, ERR_FLATTEN_OBJECT);
}
 
HWTEST_F(NetsysNativeServiceStubTest, CmdUpdateEnterpriseRoute003, TestSize.Level1)
{
    std::string ifname = "wlan0";
 
    MessageParcel data;
    if (!data.WriteString(ifname)) {
        return;
    }
 
    MessageParcel reply;
    int32_t ret = notifyStub_->CmdUpdateEnterpriseRoute(data, reply);
    EXPECT_EQ(ret, ERR_FLATTEN_OBJECT);
}
 
HWTEST_F(NetsysNativeServiceStubTest, CmdUpdateEnterpriseRoute004, TestSize.Level1)
{
    uint32_t uid = 20000138;
    std::string ifname = "wlan0";
 
    MessageParcel data;
    if (!data.WriteString(ifname)) {
        return;
    }
 
    if (!data.WriteUint32(uid)) {
        return;
    }
 
    MessageParcel reply;
    int32_t ret = notifyStub_->CmdUpdateEnterpriseRoute(data, reply);
    EXPECT_EQ(ret, ERR_FLATTEN_OBJECT);
}
#endif
 




#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
HWTEST_F(NetsysNativeServiceTest, UpdateEnterpriseRouteTest001, TestSize.Level1)
{
    uint32_t uid = 20000138;
    std::string ifname = "wlan0";
    bool add = true;
    auto ret = instance_->UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_SUCCESS);
}
 
HWTEST_F(NetsysNativeServiceTest, UpdateEnterpriseRouteTest002, TestSize.Level1)
{
    uint32_t uid = 0;
    std::string ifname = "wlan0";
    bool add = true;
    auto ret = instance_->UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_SUCCESS);
}
 
HWTEST_F(NetsysNativeServiceTest, UpdateEnterpriseRouteTest003, TestSize.Level1)
{
    uint32_t uid = 20000138;
    std::string ifname = "notexist";
    bool add = true;
    auto ret = instance_->UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NetManagerStandard::NETMANAGER_ERR_PARAMETER_ERROR);
}
#endif
 






#ifdef FEATURE_ENTERPRISE_ROUTE_CUSTOM
HWTEST_F(RouteManagerTest, UpdateEnterpriseRoute001, TestSize.Level1)
{
    std::string ifname = "wlan0";
    uint32_t uid = 20000138;
    bool add = true;
    int32_t ret = RouteManager::UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NETMANAGER_SUCCESS);
}
 
HWTEST_F(RouteManagerTest, UpdateEnterpriseRoute002, TestSize.Level1)
{
    std::string ifname = "wlan0";
    uint32_t uid = 0;
    bool add = true;
    int32_t ret = RouteManager::UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NETMANAGER_SUCCESS);
}
 
HWTEST_F(RouteManagerTest, UpdateEnterpriseRoute003, TestSize.Level1)
{
    std::string ifname = "notexist";
    uint32_t uid = 0;
    bool add = true;
    int32_t ret = RouteManager::UpdateEnterpriseRoute(ifname, uid, add);
    EXPECT_EQ(ret, NETMANAGER_ERR_PARAMETER_ERROR);
}
#endif
 






